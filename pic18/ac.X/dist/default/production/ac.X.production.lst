

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jun 25 05:13:44 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 1.45
    19                           ; Generated 16/11/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4520 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     _LATD	set	3980
    53  0000                     _LATCbits	set	3979
    54  0000                     _ADRESL	set	4035
    55  0000                     _ADRESH	set	4036
    56  0000                     _PORTB	set	3969
    57  0000                     _LATB	set	3978
    58  0000                     _CMCON	set	4020
    59  0000                     _ADCON2	set	4032
    60  0000                     _ADCON1	set	4033
    61  0000                     _ADCON0	set	4034
    62  0000                     _TRISA	set	3986
    63  0000                     _TRISD	set	3989
    64  0000                     _TRISB	set	3987
    65  0000                     _TRISC	set	3988
    66  0000                     _PORTA	set	3968
    67  0000                     _PORTD	set	3971
    68  0000                     _PORTC	set	3970
    69  0000                     _GO	set	32273
    70                           
    71                           ; #config settings
    72                           
    73                           	psect	cinit
    74  007CDE                     __pcinit:
    75                           	opt stack 0
    76  007CDE                     start_initialization:
    77                           	opt stack 0
    78  007CDE                     __initialization:
    79                           	opt stack 0
    80  007CDE                     end_of_initialization:
    81                           	opt stack 0
    82  007CDE                     __end_of__initialization:
    83                           	opt stack 0
    84  007CDE  0100               	movlb	0
    85  007CE0  EF83  F03F         	goto	_main	;jump to C main() function
    86                           
    87                           	psect	cstackCOMRAM
    88  000001                     __pcstackCOMRAM:
    89                           	opt stack 0
    90  000001                     ??_pulse:
    91  000001                     ?_getvalue:
    92                           	opt stack 0
    93  000001                     ?___awdiv:
    94                           	opt stack 0
    95  000001                     ?___awmod:
    96                           	opt stack 0
    97  000001                     ___awdiv@dividend:
    98                           	opt stack 0
    99  000001                     ___awmod@dividend:
   100                           	opt stack 0
   101                           
   102                           ; 2 bytes @ 0x0
   103  000001                     	ds	1
   104  000002                     command@cmd:
   105                           	opt stack 0
   106  000002                     data@data:
   107                           	opt stack 0
   108                           
   109                           ; 1 bytes @ 0x1
   110  000002                     	ds	1
   111  000003                     ??_getvalue:
   112  000003                     ___awdiv@divisor:
   113                           	opt stack 0
   114  000003                     ___awmod@divisor:
   115                           	opt stack 0
   116                           
   117                           ; 2 bytes @ 0x2
   118  000003                     	ds	2
   119  000005                     ___awdiv@counter:
   120                           	opt stack 0
   121  000005                     ___awmod@counter:
   122                           	opt stack 0
   123  000005                     getvalue@x:
   124                           	opt stack 0
   125                           
   126                           ; 2 bytes @ 0x4
   127  000005                     	ds	1
   128  000006                     ___awdiv@sign:
   129                           	opt stack 0
   130  000006                     ___awmod@sign:
   131                           	opt stack 0
   132                           
   133                           ; 1 bytes @ 0x5
   134  000006                     	ds	1
   135  000007                     ___awdiv@quotient:
   136                           	opt stack 0
   137                           
   138                           ; 2 bytes @ 0x6
   139  000007                     	ds	2
   140  000009                     conv@n:
   141                           	opt stack 0
   142                           
   143                           ; 2 bytes @ 0x8
   144  000009                     	ds	2
   145  00000B                     conv@thou:
   146                           	opt stack 0
   147                           
   148                           ; 2 bytes @ 0xA
   149  00000B                     	ds	2
   150  00000D                     conv@hun:
   151                           	opt stack 0
   152                           
   153                           ; 2 bytes @ 0xC
   154  00000D                     	ds	2
   155  00000F                     conv@ten:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0xE
   159  00000F                     	ds	2
   160  000011                     conv@one:
   161                           	opt stack 0
   162                           
   163                           ; 2 bytes @ 0x10
   164  000011                     	ds	2
   165  000013                     conv@temp:
   166                           	opt stack 0
   167                           
   168                           ; 2 bytes @ 0x12
   169  000013                     	ds	2
   170  000015                     main@x:
   171                           	opt stack 0
   172                           
   173                           ; 2 bytes @ 0x14
   174  000015                     	ds	2
   175                           
   176 ;;
   177 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   178 ;;
   179 ;; *************** function _main *****************
   180 ;; Defined at:
   181 ;;		line 11 in file "ACC.c"
   182 ;; Parameters:    Size  Location     Type
   183 ;;		None
   184 ;; Auto vars:     Size  Location     Type
   185 ;;  x               2   20[COMRAM] int 
   186 ;; Return value:  Size  Location     Type
   187 ;;                  1    wreg      void 
   188 ;; Registers used:
   189 ;;		wreg, status,2, status,0, cstack
   190 ;; Tracked objects:
   191 ;;		On entry : 0/0
   192 ;;		On exit  : 0/0
   193 ;;		Unchanged: 0/0
   194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   195 ;;      Params:         0       0       0       0       0       0       0
   196 ;;      Locals:         2       0       0       0       0       0       0
   197 ;;      Temps:          0       0       0       0       0       0       0
   198 ;;      Totals:         2       0       0       0       0       0       0
   199 ;;Total ram usage:        2 bytes
   200 ;; Hardware stack levels required when called:    3
   201 ;; This function calls:
   202 ;;		_command
   203 ;;		_conv
   204 ;;		_getvalue
   205 ;; This function is called by:
   206 ;;		Startup code after reset
   207 ;; This function uses a non-reentrant model
   208 ;;
   209                           
   210                           	psect	text0
   211  007F06                     __ptext0:
   212                           	opt stack 0
   213  007F06                     _main:
   214                           	opt stack 28
   215                           
   216                           ;ACC.c: 13: PORTC=0X00;
   217                           
   218                           ;incstack = 0
   219  007F06  0E00               	movlw	0
   220  007F08  6E82               	movwf	3970,c	;volatile
   221                           
   222                           ;ACC.c: 14: PORTD=0X00;
   223  007F0A  0E00               	movlw	0
   224  007F0C  6E83               	movwf	3971,c	;volatile
   225                           
   226                           ;ACC.c: 15: PORTC=0X00;
   227  007F0E  0E00               	movlw	0
   228  007F10  6E82               	movwf	3970,c	;volatile
   229                           
   230                           ;ACC.c: 16: PORTA=0X00;
   231  007F12  0E00               	movlw	0
   232  007F14  6E80               	movwf	3968,c	;volatile
   233                           
   234                           ;ACC.c: 17: TRISC=0X00;
   235  007F16  0E00               	movlw	0
   236  007F18  6E94               	movwf	3988,c	;volatile
   237                           
   238                           ;ACC.c: 18: TRISB=0X00;
   239  007F1A  0E00               	movlw	0
   240  007F1C  6E93               	movwf	3987,c	;volatile
   241                           
   242                           ;ACC.c: 19: TRISD=0X00;
   243  007F1E  0E00               	movlw	0
   244  007F20  6E95               	movwf	3989,c	;volatile
   245                           
   246                           ;ACC.c: 20: TRISA=0Xff;
   247  007F22  6892               	setf	3986,c	;volatile
   248                           
   249                           ;ACC.c: 21: ADCON0=0x00;
   250  007F24  0E00               	movlw	0
   251  007F26  6EC2               	movwf	4034,c	;volatile
   252                           
   253                           ;ACC.c: 22: ADCON1=0X0E;
   254  007F28  0E0E               	movlw	14
   255  007F2A  6EC1               	movwf	4033,c	;volatile
   256                           
   257                           ;ACC.c: 23: ADCON2=0XB6;
   258  007F2C  0EB6               	movlw	182
   259  007F2E  6EC0               	movwf	4032,c	;volatile
   260                           
   261                           ;ACC.c: 24: CMCON=0X07;
   262  007F30  0E07               	movlw	7
   263  007F32  6EB4               	movwf	4020,c	;volatile
   264                           
   265                           ;ACC.c: 25: command(0x38);
   266  007F34  0E38               	movlw	56
   267  007F36  EC72  F03E         	call	_command
   268                           
   269                           ;ACC.c: 26: command(0x0f);
   270  007F3A  0E0F               	movlw	15
   271  007F3C  EC72  F03E         	call	_command
   272                           
   273                           ;ACC.c: 27: command(0x01);
   274  007F40  0E01               	movlw	1
   275  007F42  EC72  F03E         	call	_command
   276                           
   277                           ;ACC.c: 28: ADCON0=0x01;
   278  007F46  0E01               	movlw	1
   279  007F48  6EC2               	movwf	4034,c	;volatile
   280                           
   281                           ;ACC.c: 29: int x=0;
   282  007F4A  0E00               	movlw	0
   283  007F4C  6E16               	movwf	main@x+1,c
   284  007F4E  0E00               	movlw	0
   285  007F50  6E15               	movwf	main@x,c
   286  007F52                     l963:
   287                           
   288                           ;ACC.c: 31: {
   289                           ;ACC.c: 32: command(0x80);
   290  007F52  0E80               	movlw	128
   291  007F54  EC72  F03E         	call	_command
   292                           
   293                           ;ACC.c: 33: x=getvalue();
   294  007F58  EC80  F03E         	call	_getvalue	;wreg free
   295  007F5C  C001  F015         	movff	?_getvalue,main@x
   296  007F60  C002  F016         	movff	?_getvalue+1,main@x+1
   297                           
   298                           ;ACC.c: 34: conv(x);
   299  007F64  C015  F009         	movff	main@x,conv@n
   300  007F68  C016  F00A         	movff	main@x+1,conv@n+1
   301  007F6C  EC1E  F03F         	call	_conv	;wreg free
   302                           
   303                           ;ACC.c: 35: if((x>=190)&&(x<=240))
   304  007F70  BE16               	btfsc	main@x+1,7,c
   305  007F72  D00E               	goto	l50
   306  007F74  5016               	movf	main@x+1,w,c
   307  007F76  E104               	bnz	u360
   308  007F78  0EBE               	movlw	190
   309  007F7A  5C15               	subwf	main@x,w,c
   310  007F7C  A0D8               	btfss	status,0,c
   311  007F7E  D008               	goto	l50
   312  007F80                     u360:
   313  007F80  BE16               	btfsc	main@x+1,7,c
   314  007F82  D039               	goto	u440
   315  007F84  5016               	movf	main@x+1,w,c
   316  007F86  E104               	bnz	l975
   317  007F88  0EF1               	movlw	241
   318  007F8A  5C15               	subwf	main@x,w,c
   319  007F8C  A0D8               	btfss	status,0,c
   320  007F8E  D033               	goto	u440
   321  007F90                     l50:
   322  007F90                     l975:
   323                           
   324                           ;ACC.c: 39: else if((x>300)||(x<170))
   325  007F90  BE16               	btfsc	main@x+1,7,c
   326  007F92  D006               	goto	u380
   327  007F94  0E2D               	movlw	45
   328  007F96  5C15               	subwf	main@x,w,c
   329  007F98  0E01               	movlw	1
   330  007F9A  5816               	subwfb	main@x+1,w,c
   331  007F9C  B0D8               	btfsc	status,0,c
   332  007F9E  D02D               	goto	l61
   333  007FA0                     u380:
   334  007FA0  BE16               	btfsc	main@x+1,7,c
   335  007FA2  D02B               	goto	l61
   336  007FA4  5016               	movf	main@x+1,w,c
   337  007FA6  E104               	bnz	l981
   338  007FA8  0EAA               	movlw	170
   339  007FAA  5C15               	subwf	main@x,w,c
   340  007FAC  A0D8               	btfss	status,0,c
   341  007FAE  D025               	goto	l61
   342  007FB0                     l981:
   343                           
   344                           ;ACC.c: 43: else if(((x>240)&&(x<300))||((x>170)&&(x<190)))
   345  007FB0  BE16               	btfsc	main@x+1,7,c
   346  007FB2  D00E               	goto	u410
   347  007FB4  5016               	movf	main@x+1,w,c
   348  007FB6  E104               	bnz	u400
   349  007FB8  0EF1               	movlw	241
   350  007FBA  5C15               	subwf	main@x,w,c
   351  007FBC  A0D8               	btfss	status,0,c
   352  007FBE  D008               	goto	u410
   353  007FC0                     u400:
   354  007FC0  BE16               	btfsc	main@x+1,7,c
   355  007FC2  D016               	goto	u430
   356  007FC4  0E2C               	movlw	44
   357  007FC6  5C15               	subwf	main@x,w,c
   358  007FC8  0E01               	movlw	1
   359  007FCA  5816               	subwfb	main@x+1,w,c
   360  007FCC  A0D8               	btfss	status,0,c
   361  007FCE  D010               	goto	u430
   362  007FD0                     u410:
   363  007FD0  BE16               	btfsc	main@x+1,7,c
   364  007FD2  D7BF               	goto	l49
   365  007FD4  5016               	movf	main@x+1,w,c
   366  007FD6  E104               	bnz	u420
   367  007FD8  0EAB               	movlw	171
   368  007FDA  5C15               	subwf	main@x,w,c
   369  007FDC  A0D8               	btfss	status,0,c
   370  007FDE  D7B9               	goto	l49
   371  007FE0                     u420:
   372  007FE0  BE16               	btfsc	main@x+1,7,c
   373  007FE2  D006               	goto	u430
   374  007FE4  5016               	movf	main@x+1,w,c
   375  007FE6  E1B5               	bnz	l963
   376  007FE8  0EBE               	movlw	190
   377  007FEA  5C15               	subwf	main@x,w,c
   378  007FEC  B0D8               	btfsc	status,0,c
   379  007FEE  D7B1               	goto	l49
   380  007FF0                     u430:
   381                           
   382                           ;ACC.c: 44: {
   383                           ;ACC.c: 45: if(PORTB==0XFF)
   384  007FF0  2881               	incf	3969,w,c	;volatile
   385  007FF2  A4D8               	btfss	status,2,c
   386  007FF4  D002               	goto	l61
   387  007FF6                     u440:
   388                           
   389                           ;ACC.c: 46: {
   390                           ;ACC.c: 47: LATB=0XFF;
   391  007FF6  688A               	setf	3978,c	;volatile
   392                           
   393                           ;ACC.c: 48: }
   394  007FF8  D7AC               	goto	l49
   395  007FFA                     l61:
   396                           
   397                           ;ACC.c: 49: else
   398                           ;ACC.c: 50: LATB=0X00;
   399  007FFA  0E00               	movlw	0
   400  007FFC  6E8A               	movwf	3978,c	;volatile
   401  007FFE  D7A9               	goto	l49
   402  008000                     __end_of_main:
   403                           	opt stack 0
   404                           status	equ	0xFD8
   405                           
   406 ;; *************** function _getvalue *****************
   407 ;; Defined at:
   408 ;;		line 55 in file "ACC.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  x               2    4[COMRAM] int 
   413 ;; Return value:  Size  Location     Type
   414 ;;                  2    0[COMRAM] int 
   415 ;; Registers used:
   416 ;;		wreg, status,2, status,0
   417 ;; Tracked objects:
   418 ;;		On entry : 0/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   422 ;;      Params:         2       0       0       0       0       0       0
   423 ;;      Locals:         2       0       0       0       0       0       0
   424 ;;      Temps:          2       0       0       0       0       0       0
   425 ;;      Totals:         6       0       0       0       0       0       0
   426 ;;Total ram usage:        6 bytes
   427 ;; Hardware stack levels used:    1
   428 ;; This function calls:
   429 ;;		Nothing
   430 ;; This function is called by:
   431 ;;		_main
   432 ;; This function uses a non-reentrant model
   433 ;;
   434                           
   435                           	psect	text1
   436  007D00                     __ptext1:
   437                           	opt stack 0
   438  007D00                     _getvalue:
   439                           	opt stack 30
   440                           
   441                           ;ACC.c: 57: int x;
   442                           ;ACC.c: 58: GO=1;
   443                           
   444                           ;incstack = 0
   445  007D00  82C2               	bsf	4034,1,c	;volatile
   446  007D02  B2C2               	btfsc	4034,1,c	;volatile
   447  007D04  D7FE               	goto	l69
   448                           
   449                           ;ACC.c: 60: x=(ADRESH*256)+ADRESL;
   450  007D06  50C4               	movf	4036,w,c	;volatile
   451  007D08  6E04               	movwf	(??_getvalue+1)& (0+255),c
   452  007D0A  6A03               	clrf	??_getvalue& (0+255),c
   453  007D0C  50C3               	movf	4035,w,c	;volatile
   454  007D0E  2403               	addwf	??_getvalue,w,c
   455  007D10  6E05               	movwf	getvalue@x,c
   456  007D12  0E00               	movlw	0
   457  007D14  2004               	addwfc	??_getvalue+1,w,c
   458  007D16  6E06               	movwf	getvalue@x+1,c
   459                           
   460                           ;ACC.c: 61: return x;
   461  007D18  C005  F001         	movff	getvalue@x,?_getvalue
   462  007D1C  C006  F002         	movff	getvalue@x+1,?_getvalue+1
   463  007D20  0012               	return	
   464  007D22                     __end_of_getvalue:
   465                           	opt stack 0
   466                           status	equ	0xFD8
   467                           
   468 ;; *************** function _conv *****************
   469 ;; Defined at:
   470 ;;		line 84 in file "ACC.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;  n               2    8[COMRAM] int 
   473 ;; Auto vars:     Size  Location     Type
   474 ;;  temp            2   18[COMRAM] int 
   475 ;;  one             2   16[COMRAM] unsigned int 
   476 ;;  ten             2   14[COMRAM] unsigned int 
   477 ;;  hun             2   12[COMRAM] unsigned int 
   478 ;;  thou            2   10[COMRAM] unsigned int 
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      void 
   481 ;; Registers used:
   482 ;;		wreg, status,2, status,0, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   488 ;;      Params:         2       0       0       0       0       0       0
   489 ;;      Locals:        10       0       0       0       0       0       0
   490 ;;      Temps:          0       0       0       0       0       0       0
   491 ;;      Totals:        12       0       0       0       0       0       0
   492 ;;Total ram usage:       12 bytes
   493 ;; Hardware stack levels used:    1
   494 ;; Hardware stack levels required when called:    2
   495 ;; This function calls:
   496 ;;		___awdiv
   497 ;;		___awmod
   498 ;;		_data
   499 ;; This function is called by:
   500 ;;		_main
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           	psect	text2
   505  007E3C                     __ptext2:
   506                           	opt stack 0
   507  007E3C                     _conv:
   508                           	opt stack 28
   509                           
   510                           ;ACC.c: 86: unsigned thou,hun,ten,one;
   511                           ;ACC.c: 87: int temp;
   512                           ;ACC.c: 88: thou=n/1000;
   513                           
   514                           ;incstack = 0
   515  007E3C  C009  F001         	movff	conv@n,___awdiv@dividend
   516  007E40  C00A  F002         	movff	conv@n+1,___awdiv@dividend+1
   517  007E44  0E03               	movlw	3
   518  007E46  6E04               	movwf	___awdiv@divisor+1,c
   519  007E48  0EE8               	movlw	232
   520  007E4A  6E03               	movwf	___awdiv@divisor,c
   521  007E4C  ECDC  F03E         	call	___awdiv	;wreg free
   522  007E50  C001  F00B         	movff	?___awdiv,conv@thou
   523  007E54  C002  F00C         	movff	?___awdiv+1,conv@thou+1
   524                           
   525                           ;ACC.c: 89: temp=n%1000;
   526  007E58  C009  F001         	movff	conv@n,___awmod@dividend
   527  007E5C  C00A  F002         	movff	conv@n+1,___awmod@dividend+1
   528  007E60  0E03               	movlw	3
   529  007E62  6E04               	movwf	___awmod@divisor+1,c
   530  007E64  0EE8               	movlw	232
   531  007E66  6E03               	movwf	___awmod@divisor,c
   532  007E68  ECA4  F03E         	call	___awmod	;wreg free
   533  007E6C  C001  F013         	movff	?___awmod,conv@temp
   534  007E70  C002  F014         	movff	?___awmod+1,conv@temp+1
   535                           
   536                           ;ACC.c: 90: hun=temp/100;
   537  007E74  C013  F001         	movff	conv@temp,___awdiv@dividend
   538  007E78  C014  F002         	movff	conv@temp+1,___awdiv@dividend+1
   539  007E7C  0E00               	movlw	0
   540  007E7E  6E04               	movwf	___awdiv@divisor+1,c
   541  007E80  0E64               	movlw	100
   542  007E82  6E03               	movwf	___awdiv@divisor,c
   543  007E84  ECDC  F03E         	call	___awdiv	;wreg free
   544  007E88  C001  F00D         	movff	?___awdiv,conv@hun
   545  007E8C  C002  F00E         	movff	?___awdiv+1,conv@hun+1
   546                           
   547                           ;ACC.c: 91: temp=temp%100;
   548  007E90  C013  F001         	movff	conv@temp,___awmod@dividend
   549  007E94  C014  F002         	movff	conv@temp+1,___awmod@dividend+1
   550  007E98  0E00               	movlw	0
   551  007E9A  6E04               	movwf	___awmod@divisor+1,c
   552  007E9C  0E64               	movlw	100
   553  007E9E  6E03               	movwf	___awmod@divisor,c
   554  007EA0  ECA4  F03E         	call	___awmod	;wreg free
   555  007EA4  C001  F013         	movff	?___awmod,conv@temp
   556  007EA8  C002  F014         	movff	?___awmod+1,conv@temp+1
   557                           
   558                           ;ACC.c: 92: ten=temp/10;
   559  007EAC  C013  F001         	movff	conv@temp,___awdiv@dividend
   560  007EB0  C014  F002         	movff	conv@temp+1,___awdiv@dividend+1
   561  007EB4  0E00               	movlw	0
   562  007EB6  6E04               	movwf	___awdiv@divisor+1,c
   563  007EB8  0E0A               	movlw	10
   564  007EBA  6E03               	movwf	___awdiv@divisor,c
   565  007EBC  ECDC  F03E         	call	___awdiv	;wreg free
   566  007EC0  C001  F00F         	movff	?___awdiv,conv@ten
   567  007EC4  C002  F010         	movff	?___awdiv+1,conv@ten+1
   568                           
   569                           ;ACC.c: 93: one=temp%10;
   570  007EC8  C013  F001         	movff	conv@temp,___awmod@dividend
   571  007ECC  C014  F002         	movff	conv@temp+1,___awmod@dividend+1
   572  007ED0  0E00               	movlw	0
   573  007ED2  6E04               	movwf	___awmod@divisor+1,c
   574  007ED4  0E0A               	movlw	10
   575  007ED6  6E03               	movwf	___awmod@divisor,c
   576  007ED8  ECA4  F03E         	call	___awmod	;wreg free
   577  007EDC  C001  F011         	movff	?___awmod,conv@one
   578  007EE0  C002  F012         	movff	?___awmod+1,conv@one+1
   579                           
   580                           ;ACC.c: 94: data(thou+48);
   581  007EE4  500B               	movf	conv@thou,w,c
   582  007EE6  0F30               	addlw	48
   583  007EE8  EC79  F03E         	call	_data
   584                           
   585                           ;ACC.c: 95: data(hun+48);
   586  007EEC  500D               	movf	conv@hun,w,c
   587  007EEE  0F30               	addlw	48
   588  007EF0  EC79  F03E         	call	_data
   589                           
   590                           ;ACC.c: 96: data(ten+48);
   591  007EF4  500F               	movf	conv@ten,w,c
   592  007EF6  0F30               	addlw	48
   593  007EF8  EC79  F03E         	call	_data
   594                           
   595                           ;ACC.c: 97: data(one+48);
   596  007EFC  5011               	movf	conv@one,w,c
   597  007EFE  0F30               	addlw	48
   598  007F00  EC79  F03E         	call	_data
   599  007F04  0012               	return		;funcret
   600  007F06                     __end_of_conv:
   601                           	opt stack 0
   602                           status	equ	0xFD8
   603                           
   604 ;; *************** function _data *****************
   605 ;; Defined at:
   606 ;;		line 76 in file "ACC.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  data            1    wreg     unsigned char 
   609 ;; Auto vars:     Size  Location     Type
   610 ;;  data            1    1[COMRAM] unsigned char 
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   620 ;;      Params:         0       0       0       0       0       0       0
   621 ;;      Locals:         1       0       0       0       0       0       0
   622 ;;      Temps:          0       0       0       0       0       0       0
   623 ;;      Totals:         1       0       0       0       0       0       0
   624 ;;Total ram usage:        1 bytes
   625 ;; Hardware stack levels used:    1
   626 ;; Hardware stack levels required when called:    1
   627 ;; This function calls:
   628 ;;		_pulse
   629 ;; This function is called by:
   630 ;;		_conv
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text3
   635  007CF2                     __ptext3:
   636                           	opt stack 0
   637  007CF2                     _data:
   638                           	opt stack 28
   639                           
   640                           ;incstack = 0
   641                           ;data@data stored from wreg
   642  007CF2  6E02               	movwf	data@data,c
   643                           
   644                           ;ACC.c: 78: LATCbits.LC0=1;
   645  007CF4  808B               	bsf	3979,0,c	;volatile
   646                           
   647                           ;ACC.c: 79: LATD=data;
   648  007CF6  C002  FF8C         	movff	data@data,3980	;volatile
   649                           
   650                           ;ACC.c: 80: pulse();
   651  007CFA  EC91  F03E         	call	_pulse	;wreg free
   652  007CFE  0012               	return		;funcret
   653  007D00                     __end_of_data:
   654                           	opt stack 0
   655                           status	equ	0xFD8
   656                           
   657 ;; *************** function ___awmod *****************
   658 ;; Defined at:
   659 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;  dividend        2    0[COMRAM] int 
   662 ;;  divisor         2    2[COMRAM] int 
   663 ;; Auto vars:     Size  Location     Type
   664 ;;  sign            1    5[COMRAM] unsigned char 
   665 ;;  counter         1    4[COMRAM] unsigned char 
   666 ;; Return value:  Size  Location     Type
   667 ;;                  2    0[COMRAM] int 
   668 ;; Registers used:
   669 ;;		wreg, status,2, status,0
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   675 ;;      Params:         4       0       0       0       0       0       0
   676 ;;      Locals:         2       0       0       0       0       0       0
   677 ;;      Temps:          0       0       0       0       0       0       0
   678 ;;      Totals:         6       0       0       0       0       0       0
   679 ;;Total ram usage:        6 bytes
   680 ;; Hardware stack levels used:    1
   681 ;; This function calls:
   682 ;;		Nothing
   683 ;; This function is called by:
   684 ;;		_conv
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text4
   689  007D48                     __ptext4:
   690                           	opt stack 0
   691  007D48                     ___awmod:
   692                           	opt stack 29
   693                           
   694                           ;incstack = 0
   695  007D48  0E00               	movlw	0
   696  007D4A  6E06               	movwf	___awmod@sign,c
   697  007D4C  AE02               	btfss	___awmod@dividend+1,7,c
   698  007D4E  D006               	goto	l264
   699  007D50  6C01               	negf	___awmod@dividend,c
   700  007D52  1E02               	comf	___awmod@dividend+1,f,c
   701  007D54  B0D8               	btfsc	status,0,c
   702  007D56  2A02               	incf	___awmod@dividend+1,f,c
   703  007D58  0E01               	movlw	1
   704  007D5A  6E06               	movwf	___awmod@sign,c
   705  007D5C                     l264:
   706  007D5C  AE04               	btfss	___awmod@divisor+1,7,c
   707  007D5E  D004               	goto	l265
   708  007D60  6C03               	negf	___awmod@divisor,c
   709  007D62  1E04               	comf	___awmod@divisor+1,f,c
   710  007D64  B0D8               	btfsc	status,0,c
   711  007D66  2A04               	incf	___awmod@divisor+1,f,c
   712  007D68                     l265:
   713  007D68  5003               	movf	___awmod@divisor,w,c
   714  007D6A  1004               	iorwf	___awmod@divisor+1,w,c
   715  007D6C  B4D8               	btfsc	status,2,c
   716  007D6E  D018               	goto	l272
   717  007D70  0E01               	movlw	1
   718  007D72  6E05               	movwf	___awmod@counter,c
   719  007D74  D004               	goto	l267
   720  007D76  90D8               	bcf	status,0,c
   721  007D78  3603               	rlcf	___awmod@divisor,f,c
   722  007D7A  3604               	rlcf	___awmod@divisor+1,f,c
   723  007D7C  2A05               	incf	___awmod@counter,f,c
   724  007D7E                     l267:
   725  007D7E  AE04               	btfss	___awmod@divisor+1,7,c
   726  007D80  D7FA               	goto	l268
   727  007D82                     u320:
   728  007D82  5003               	movf	___awmod@divisor,w,c
   729  007D84  5C01               	subwf	___awmod@dividend,w,c
   730  007D86  5004               	movf	___awmod@divisor+1,w,c
   731  007D88  5802               	subwfb	___awmod@dividend+1,w,c
   732  007D8A  A0D8               	btfss	status,0,c
   733  007D8C  D004               	goto	l271
   734  007D8E  5003               	movf	___awmod@divisor,w,c
   735  007D90  5E01               	subwf	___awmod@dividend,f,c
   736  007D92  5004               	movf	___awmod@divisor+1,w,c
   737  007D94  5A02               	subwfb	___awmod@dividend+1,f,c
   738  007D96                     l271:
   739  007D96  90D8               	bcf	status,0,c
   740  007D98  3204               	rrcf	___awmod@divisor+1,f,c
   741  007D9A  3203               	rrcf	___awmod@divisor,f,c
   742  007D9C  2E05               	decfsz	___awmod@counter,f,c
   743  007D9E  D7F1               	goto	u320
   744  007DA0                     l272:
   745  007DA0  5006               	movf	___awmod@sign,w,c
   746  007DA2  B4D8               	btfsc	status,2,c
   747  007DA4  D004               	goto	l273
   748  007DA6  6C01               	negf	___awmod@dividend,c
   749  007DA8  1E02               	comf	___awmod@dividend+1,f,c
   750  007DAA  B0D8               	btfsc	status,0,c
   751  007DAC  2A02               	incf	___awmod@dividend+1,f,c
   752  007DAE                     l273:
   753  007DAE  C001  F001         	movff	___awmod@dividend,?___awmod
   754  007DB2  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   755  007DB6  0012               	return	
   756  007DB8                     __end_of___awmod:
   757                           	opt stack 0
   758                           status	equ	0xFD8
   759                           
   760 ;; *************** function ___awdiv *****************
   761 ;; Defined at:
   762 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;  dividend        2    0[COMRAM] int 
   765 ;;  divisor         2    2[COMRAM] int 
   766 ;; Auto vars:     Size  Location     Type
   767 ;;  quotient        2    6[COMRAM] int 
   768 ;;  sign            1    5[COMRAM] unsigned char 
   769 ;;  counter         1    4[COMRAM] unsigned char 
   770 ;; Return value:  Size  Location     Type
   771 ;;                  2    0[COMRAM] int 
   772 ;; Registers used:
   773 ;;		wreg, status,2, status,0
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   779 ;;      Params:         4       0       0       0       0       0       0
   780 ;;      Locals:         4       0       0       0       0       0       0
   781 ;;      Temps:          0       0       0       0       0       0       0
   782 ;;      Totals:         8       0       0       0       0       0       0
   783 ;;Total ram usage:        8 bytes
   784 ;; Hardware stack levels used:    1
   785 ;; This function calls:
   786 ;;		Nothing
   787 ;; This function is called by:
   788 ;;		_conv
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           	psect	text5
   793  007DB8                     __ptext5:
   794                           	opt stack 0
   795  007DB8                     ___awdiv:
   796                           	opt stack 29
   797                           
   798                           ;incstack = 0
   799  007DB8  0E00               	movlw	0
   800  007DBA  6E06               	movwf	___awdiv@sign,c
   801  007DBC  AE04               	btfss	___awdiv@divisor+1,7,c
   802  007DBE  D006               	goto	l251
   803  007DC0  6C03               	negf	___awdiv@divisor,c
   804  007DC2  1E04               	comf	___awdiv@divisor+1,f,c
   805  007DC4  B0D8               	btfsc	status,0,c
   806  007DC6  2A04               	incf	___awdiv@divisor+1,f,c
   807  007DC8  0E01               	movlw	1
   808  007DCA  6E06               	movwf	___awdiv@sign,c
   809  007DCC                     l251:
   810  007DCC  AE02               	btfss	___awdiv@dividend+1,7,c
   811  007DCE  D006               	goto	l252
   812  007DD0  6C01               	negf	___awdiv@dividend,c
   813  007DD2  1E02               	comf	___awdiv@dividend+1,f,c
   814  007DD4  B0D8               	btfsc	status,0,c
   815  007DD6  2A02               	incf	___awdiv@dividend+1,f,c
   816  007DD8  0E01               	movlw	1
   817  007DDA  1A06               	xorwf	___awdiv@sign,f,c
   818  007DDC                     l252:
   819  007DDC  0E00               	movlw	0
   820  007DDE  6E08               	movwf	___awdiv@quotient+1,c
   821  007DE0  0E00               	movlw	0
   822  007DE2  6E07               	movwf	___awdiv@quotient,c
   823  007DE4  5003               	movf	___awdiv@divisor,w,c
   824  007DE6  1004               	iorwf	___awdiv@divisor+1,w,c
   825  007DE8  B4D8               	btfsc	status,2,c
   826  007DEA  D01C               	goto	l259
   827  007DEC  0E01               	movlw	1
   828  007DEE  6E05               	movwf	___awdiv@counter,c
   829  007DF0  D004               	goto	l254
   830  007DF2  90D8               	bcf	status,0,c
   831  007DF4  3603               	rlcf	___awdiv@divisor,f,c
   832  007DF6  3604               	rlcf	___awdiv@divisor+1,f,c
   833  007DF8  2A05               	incf	___awdiv@counter,f,c
   834  007DFA                     l254:
   835  007DFA  AE04               	btfss	___awdiv@divisor+1,7,c
   836  007DFC  D7FA               	goto	l255
   837  007DFE                     u260:
   838  007DFE  90D8               	bcf	status,0,c
   839  007E00  3607               	rlcf	___awdiv@quotient,f,c
   840  007E02  3608               	rlcf	___awdiv@quotient+1,f,c
   841  007E04  5003               	movf	___awdiv@divisor,w,c
   842  007E06  5C01               	subwf	___awdiv@dividend,w,c
   843  007E08  5004               	movf	___awdiv@divisor+1,w,c
   844  007E0A  5802               	subwfb	___awdiv@dividend+1,w,c
   845  007E0C  A0D8               	btfss	status,0,c
   846  007E0E  D005               	goto	l258
   847  007E10  5003               	movf	___awdiv@divisor,w,c
   848  007E12  5E01               	subwf	___awdiv@dividend,f,c
   849  007E14  5004               	movf	___awdiv@divisor+1,w,c
   850  007E16  5A02               	subwfb	___awdiv@dividend+1,f,c
   851  007E18  8007               	bsf	___awdiv@quotient,0,c
   852  007E1A                     l258:
   853  007E1A  90D8               	bcf	status,0,c
   854  007E1C  3204               	rrcf	___awdiv@divisor+1,f,c
   855  007E1E  3203               	rrcf	___awdiv@divisor,f,c
   856  007E20  2E05               	decfsz	___awdiv@counter,f,c
   857  007E22  D7ED               	goto	u260
   858  007E24                     l259:
   859  007E24  5006               	movf	___awdiv@sign,w,c
   860  007E26  B4D8               	btfsc	status,2,c
   861  007E28  D004               	goto	l260
   862  007E2A  6C07               	negf	___awdiv@quotient,c
   863  007E2C  1E08               	comf	___awdiv@quotient+1,f,c
   864  007E2E  B0D8               	btfsc	status,0,c
   865  007E30  2A08               	incf	___awdiv@quotient+1,f,c
   866  007E32                     l260:
   867  007E32  C007  F001         	movff	___awdiv@quotient,?___awdiv
   868  007E36  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   869  007E3A  0012               	return	
   870  007E3C                     __end_of___awdiv:
   871                           	opt stack 0
   872                           status	equ	0xFD8
   873                           
   874 ;; *************** function _command *****************
   875 ;; Defined at:
   876 ;;		line 70 in file "ACC.c"
   877 ;; Parameters:    Size  Location     Type
   878 ;;  cmd             1    wreg     unsigned char 
   879 ;; Auto vars:     Size  Location     Type
   880 ;;  cmd             1    1[COMRAM] unsigned char 
   881 ;; Return value:  Size  Location     Type
   882 ;;                  1    wreg      void 
   883 ;; Registers used:
   884 ;;		wreg, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 0/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   890 ;;      Params:         0       0       0       0       0       0       0
   891 ;;      Locals:         1       0       0       0       0       0       0
   892 ;;      Temps:          0       0       0       0       0       0       0
   893 ;;      Totals:         1       0       0       0       0       0       0
   894 ;;Total ram usage:        1 bytes
   895 ;; Hardware stack levels used:    1
   896 ;; Hardware stack levels required when called:    1
   897 ;; This function calls:
   898 ;;		_pulse
   899 ;; This function is called by:
   900 ;;		_main
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           	psect	text6
   905  007CE4                     __ptext6:
   906                           	opt stack 0
   907  007CE4                     _command:
   908                           	opt stack 29
   909                           
   910                           ;incstack = 0
   911                           ;command@cmd stored from wreg
   912  007CE4  6E02               	movwf	command@cmd,c
   913                           
   914                           ;ACC.c: 72: LATCbits.LC0=0;
   915  007CE6  908B               	bcf	3979,0,c	;volatile
   916                           
   917                           ;ACC.c: 73: LATD=cmd;
   918  007CE8  C002  FF8C         	movff	command@cmd,3980	;volatile
   919                           
   920                           ;ACC.c: 74: pulse();
   921  007CEC  EC91  F03E         	call	_pulse	;wreg free
   922  007CF0  0012               	return		;funcret
   923  007CF2                     __end_of_command:
   924                           	opt stack 0
   925                           status	equ	0xFD8
   926                           
   927 ;; *************** function _pulse *****************
   928 ;; Defined at:
   929 ;;		line 63 in file "ACC.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;		None
   932 ;; Auto vars:     Size  Location     Type
   933 ;;		None
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   943 ;;      Params:         0       0       0       0       0       0       0
   944 ;;      Locals:         0       0       0       0       0       0       0
   945 ;;      Temps:          1       0       0       0       0       0       0
   946 ;;      Totals:         1       0       0       0       0       0       0
   947 ;;Total ram usage:        1 bytes
   948 ;; Hardware stack levels used:    1
   949 ;; This function calls:
   950 ;;		Nothing
   951 ;; This function is called by:
   952 ;;		_command
   953 ;;		_data
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           	psect	text7
   958  007D22                     __ptext7:
   959                           	opt stack 0
   960  007D22                     _pulse:
   961                           	opt stack 28
   962                           
   963                           ;ACC.c: 65: LATCbits.LC1=1;
   964                           
   965                           ;incstack = 0
   966  007D22  828B               	bsf	3979,1,c	;volatile
   967                           
   968                           ;ACC.c: 66: _delay((unsigned long)((10)*(20000000/4000.0)));
   969  007D24  0E41               	movlw	65
   970  007D26  6E01               	movwf	??_pulse& (0+255),c
   971  007D28  0EEE               	movlw	238
   972  007D2A                     u457:
   973  007D2A  2EE8               	decfsz	wreg,f,c
   974  007D2C  D7FE               	bra	u457
   975  007D2E  2E01               	decfsz	??_pulse& (0+255),f,c
   976  007D30  D7FC               	bra	u457
   977  007D32  D000               	nop2	
   978                           
   979                           ;ACC.c: 67: LATCbits.LC1=0;
   980  007D34  928B               	bcf	3979,1,c	;volatile
   981                           
   982                           ;ACC.c: 68: _delay((unsigned long)((10)*(20000000/4000.0)));
   983  007D36  0E41               	movlw	65
   984  007D38  6E01               	movwf	??_pulse& (0+255),c
   985  007D3A  0EEE               	movlw	238
   986  007D3C                     u467:
   987  007D3C  2EE8               	decfsz	wreg,f,c
   988  007D3E  D7FE               	bra	u467
   989  007D40  2E01               	decfsz	??_pulse& (0+255),f,c
   990  007D42  D7FC               	bra	u467
   991  007D44  D000               	nop2	
   992  007D46  0012               	return		;funcret
   993  007D48                     __end_of_pulse:
   994                           	opt stack 0
   995  0000                     wreg	equ	0xFE8
   996                           status	equ	0xFD8
   997                           wreg	equ	0xFE8
   998                           status	equ	0xFD8
   999                           
  1000                           	psect	rparam
  1001  0000                     wreg	equ	0xFE8
  1002                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     22      22
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_conv
    _conv->___awdiv
    _data->_pulse
    _command->_pulse

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2063
                                             20 COMRAM     2     2      0
                            _command
                               _conv
                           _getvalue
 ---------------------------------------------------------------------------------
 (1) _getvalue                                             6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _conv                                                12    10      2    1825
                                              8 COMRAM    12    10      2
                            ___awdiv
                            ___awmod
                               _data
 ---------------------------------------------------------------------------------
 (2) _data                                                 1     1      0      15
                                              1 COMRAM     1     1      0
                              _pulse
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _command                                              1     1      0      15
                                              1 COMRAM     1     1      0
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _pulse                                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _command
     _pulse
   _conv
     ___awdiv
     ___awmod
     _data
       _pulse
   _getvalue

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     16      16       1       17.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jun 25 05:13:44 2019

                     l50 7F90                       l61 7FFA                       l49 7F52  
                     l69 7D02                       _GO 007E11             ___awdiv@sign 0006  
                    l251 7DCC                      l260 7E32                      l252 7DDC  
                    l254 7DFA                      l255 7DF2                      l271 7D96  
                    l272 7DA0                      l264 7D5C                      l273 7DAE  
                    l265 7D68                      l258 7E1A                      l259 7E24  
                    l267 7D7E                      l268 7D76                      l963 7F52  
                    l981 7FB0                      l975 7F90                      u320 7D82  
                    u400 7FC0                      u410 7FD0                      u260 7DFE  
                    u420 7FE0                      u430 7FF0                      u440 7FF6  
                    u360 7F80                      u380 7FA0                      u457 7D2A  
                    u467 7D3C             ___awmod@sign 0006                      wreg 000FE8  
                   _LATB 000F8A                     _LATD 000F8C                     _data 7CF2  
                   _conv 7E3C                     _main 7F06                     start 0000  
           ___param_bank 000000                    ?_data 0001                    ?_conv 0009  
                  ?_main 0001          __end_of___awdiv 7E3C          __end_of___awmod 7DB8  
                  _CMCON 000FB4          ___awdiv@divisor 0003          ___awdiv@counter 0005  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTD 000F83                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95          __end_of_command 7CF2  
                  _pulse 7D22                    conv@n 0009                    main@x 0015  
                  status 000FD8          __initialization 7CDE             __end_of_data 7D00  
           __end_of_conv 7F06             __end_of_main 8000                   ??_data 0002  
                 ??_conv 000B                   ??_main 0015            __activetblptr 000000  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ADRESH 000FC4                   _ADRESL 000FC3         ___awdiv@dividend 0001  
                 ?_pulse 0001                ??___awdiv 0005         __end_of_getvalue 7D22  
              ??___awmod 0005         ___awdiv@quotient 0007          ___awmod@divisor 0003  
        ___awmod@counter 0005                ??_command 0002               __accesstop 0080  
__end_of__initialization 7CDE            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_pulse 7D48                  ??_pulse 0001                ?_getvalue 0001  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 7DB8  
                ___awmod 7D48                  __pcinit 7CDE                  __ramtop 0600  
                __ptext0 7F06                  __ptext1 7D00                  __ptext2 7E3C  
                __ptext3 7CF2                  __ptext4 7D48                  __ptext5 7DB8  
                __ptext6 7CE4                  __ptext7 7D22                  _command 7CE4  
       ___awmod@dividend 0001                  conv@hun 000D                  conv@one 0011  
                conv@ten 000F     end_of_initialization 7CDE               ??_getvalue 0003  
             command@cmd 0002      start_initialization 7CDE        __size_of_getvalue 0022  
               ?___awdiv 0001                 ?___awmod 0001                 ?_command 0001  
         __size_of_pulse 0026                 _LATCbits 000F8B                getvalue@x 0005  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0084  
       __size_of___awmod 0070         __size_of_command 000E                 data@data 0002  
               _getvalue 7D00            __size_of_data 000E            __size_of_conv 00CA  
          __size_of_main 00FA                 conv@temp 0013                 conv@thou 000B  
