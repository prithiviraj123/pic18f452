

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 24 05:07:08 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 1.45
    18                           ; Generated 16/11/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4520 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     _LATD	set	3980
    52  0000                     _LATCbits	set	3979
    53  0000                     _ADRESL	set	4035
    54  0000                     _ADRESH	set	4036
    55  0000                     _CMCON	set	4020
    56  0000                     _ADCON2	set	4032
    57  0000                     _ADCON1	set	4033
    58  0000                     _ADCON0	set	4034
    59  0000                     _TRISA	set	3986
    60  0000                     _TRISD	set	3989
    61  0000                     _TRISC	set	3988
    62  0000                     _PORTA	set	3968
    63  0000                     _PORTD	set	3971
    64  0000                     _PORTC	set	3970
    65  0000                     _GO	set	32273
    66  0000                     _GIE	set	32663
    67  0000                     _ADIE	set	31982
    68  0000                     _ADIF	set	31990
    69                           
    70                           ; #config settings
    71                           
    72                           	psect	cinit
    73  007D82                     __pcinit:
    74                           	opt stack 0
    75  007D82                     start_initialization:
    76                           	opt stack 0
    77  007D82                     __initialization:
    78                           	opt stack 0
    79  007D82                     end_of_initialization:
    80                           	opt stack 0
    81  007D82                     __end_of__initialization:
    82                           	opt stack 0
    83  007D82  0100               	movlb	0
    84  007D84  EF1D  F03F         	goto	_main	;jump to C main() function
    85                           
    86                           	psect	cstackCOMRAM
    87  000001                     __pcstackCOMRAM:
    88                           	opt stack 0
    89  000001                     ??_pulse:
    90  000001                     ?___awdiv:
    91                           	opt stack 0
    92  000001                     ?___awmod:
    93                           	opt stack 0
    94  000001                     ___awdiv@dividend:
    95                           	opt stack 0
    96  000001                     ___awmod@dividend:
    97                           	opt stack 0
    98                           
    99                           ; 2 bytes @ 0x0
   100  000001                     	ds	1
   101  000002                     command@cmd:
   102                           	opt stack 0
   103  000002                     data@data:
   104                           	opt stack 0
   105                           
   106                           ; 1 bytes @ 0x1
   107  000002                     	ds	1
   108  000003                     ___awdiv@divisor:
   109                           	opt stack 0
   110  000003                     ___awmod@divisor:
   111                           	opt stack 0
   112                           
   113                           ; 2 bytes @ 0x2
   114  000003                     	ds	2
   115  000005                     ___awdiv@counter:
   116                           	opt stack 0
   117  000005                     ___awmod@counter:
   118                           	opt stack 0
   119                           
   120                           ; 1 bytes @ 0x4
   121  000005                     	ds	1
   122  000006                     ___awdiv@sign:
   123                           	opt stack 0
   124  000006                     ___awmod@sign:
   125                           	opt stack 0
   126                           
   127                           ; 1 bytes @ 0x5
   128  000006                     	ds	1
   129  000007                     ___awdiv@quotient:
   130                           	opt stack 0
   131                           
   132                           ; 2 bytes @ 0x6
   133  000007                     	ds	2
   134  000009                     conv@n:
   135                           	opt stack 0
   136                           
   137                           ; 2 bytes @ 0x8
   138  000009                     	ds	2
   139  00000B                     conv@thou:
   140                           	opt stack 0
   141                           
   142                           ; 2 bytes @ 0xA
   143  00000B                     	ds	2
   144  00000D                     conv@hun:
   145                           	opt stack 0
   146                           
   147                           ; 2 bytes @ 0xC
   148  00000D                     	ds	2
   149  00000F                     conv@ten:
   150                           	opt stack 0
   151                           
   152                           ; 2 bytes @ 0xE
   153  00000F                     	ds	2
   154  000011                     conv@one:
   155                           	opt stack 0
   156                           
   157                           ; 2 bytes @ 0x10
   158  000011                     	ds	2
   159  000013                     conv@temp:
   160                           	opt stack 0
   161                           
   162                           ; 2 bytes @ 0x12
   163  000013                     	ds	2
   164  000015                     ??_main:
   165                           
   166                           ; 1 bytes @ 0x14
   167  000015                     	ds	2
   168  000017                     main@x:
   169                           	opt stack 0
   170                           
   171                           ; 2 bytes @ 0x16
   172  000017                     	ds	2
   173                           
   174 ;;
   175 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   176 ;;
   177 ;; *************** function _main *****************
   178 ;; Defined at:
   179 ;;		line 11 in file "adc2.c"
   180 ;; Parameters:    Size  Location     Type
   181 ;;		None
   182 ;; Auto vars:     Size  Location     Type
   183 ;;  x               2   22[COMRAM] int 
   184 ;; Return value:  Size  Location     Type
   185 ;;                  1    wreg      void 
   186 ;; Registers used:
   187 ;;		wreg, status,2, status,0, cstack
   188 ;; Tracked objects:
   189 ;;		On entry : 0/0
   190 ;;		On exit  : 0/0
   191 ;;		Unchanged: 0/0
   192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   193 ;;      Params:         0       0       0       0       0       0       0
   194 ;;      Locals:         2       0       0       0       0       0       0
   195 ;;      Temps:          2       0       0       0       0       0       0
   196 ;;      Totals:         4       0       0       0       0       0       0
   197 ;;Total ram usage:        4 bytes
   198 ;; Hardware stack levels required when called:    3
   199 ;; This function calls:
   200 ;;		_command
   201 ;;		_conv
   202 ;; This function is called by:
   203 ;;		Startup code after reset
   204 ;; This function uses a non-reentrant model
   205 ;;
   206                           
   207                           	psect	text0
   208  007E3A                     __ptext0:
   209                           	opt stack 0
   210  007E3A                     _main:
   211                           	opt stack 28
   212                           
   213                           ;adc2.c: 13: PORTC=0X00;
   214                           
   215                           ;incstack = 0
   216  007E3A  0E00               	movlw	0
   217  007E3C  6E82               	movwf	3970,c	;volatile
   218                           
   219                           ;adc2.c: 14: PORTD=0X00;
   220  007E3E  0E00               	movlw	0
   221  007E40  6E83               	movwf	3971,c	;volatile
   222                           
   223                           ;adc2.c: 15: PORTA=0X00;
   224  007E42  0E00               	movlw	0
   225  007E44  6E80               	movwf	3968,c	;volatile
   226                           
   227                           ;adc2.c: 16: TRISC=0X00;
   228  007E46  0E00               	movlw	0
   229  007E48  6E94               	movwf	3988,c	;volatile
   230                           
   231                           ;adc2.c: 17: TRISD=0X00;
   232  007E4A  0E00               	movlw	0
   233  007E4C  6E95               	movwf	3989,c	;volatile
   234                           
   235                           ;adc2.c: 18: TRISA=0Xff;
   236  007E4E  6892               	setf	3986,c	;volatile
   237                           
   238                           ;adc2.c: 20: ADCON0=0x00;
   239  007E50  0E00               	movlw	0
   240  007E52  6EC2               	movwf	4034,c	;volatile
   241                           
   242                           ;adc2.c: 21: ADCON1=0X0E;
   243  007E54  0E0E               	movlw	14
   244  007E56  6EC1               	movwf	4033,c	;volatile
   245                           
   246                           ;adc2.c: 22: ADCON2=0XB6;
   247  007E58  0EB6               	movlw	182
   248  007E5A  6EC0               	movwf	4032,c	;volatile
   249                           
   250                           ;adc2.c: 23: CMCON=0X07;
   251  007E5C  0E07               	movlw	7
   252  007E5E  6EB4               	movwf	4020,c	;volatile
   253                           
   254                           ;adc2.c: 24: ADIF=0;
   255  007E60  9C9E               	bcf	3998,6,c	;volatile
   256                           
   257                           ;adc2.c: 25: ADIE=1;
   258  007E62  8C9D               	bsf	3997,6,c	;volatile
   259                           
   260                           ;adc2.c: 26: GIE=1;
   261  007E64  8EF2               	bsf	intcon,7,c	;volatile
   262                           
   263                           ;adc2.c: 27: command(0x38);
   264  007E66  0E38               	movlw	56
   265  007E68  ECC4  F03E         	call	_command
   266                           
   267                           ;adc2.c: 28: command(0x0f);
   268  007E6C  0E0F               	movlw	15
   269  007E6E  ECC4  F03E         	call	_command
   270                           
   271                           ;adc2.c: 29: command(0x01);
   272  007E72  0E01               	movlw	1
   273  007E74  ECC4  F03E         	call	_command
   274                           
   275                           ;adc2.c: 30: ADCON0=0x01;
   276  007E78  0E01               	movlw	1
   277  007E7A  6EC2               	movwf	4034,c	;volatile
   278                           
   279                           ;adc2.c: 31: int x=0;
   280  007E7C  0E00               	movlw	0
   281  007E7E  6E18               	movwf	main@x+1,c
   282  007E80  0E00               	movlw	0
   283  007E82  6E17               	movwf	main@x,c
   284  007E84                     
   285                           ;adc2.c: 33: {
   286                           ;adc2.c: 34: GO=1;
   287  007E84  82C2               	bsf	4034,1,c	;volatile
   288                           
   289                           ;adc2.c: 35: if(ADIF==1)
   290  007E86  AC9E               	btfss	3998,6,c	;volatile
   291  007E88  D7FD               	goto	l47
   292                           
   293                           ;adc2.c: 36: {
   294                           ;adc2.c: 37: command(0x80);
   295  007E8A  0E80               	movlw	128
   296  007E8C  ECC4  F03E         	call	_command
   297                           
   298                           ;adc2.c: 38: x=(ADRESH*256)+ADRESL;
   299  007E90  50C4               	movf	4036,w,c	;volatile
   300  007E92  6E16               	movwf	(??_main+1)& (0+255),c
   301  007E94  6A15               	clrf	??_main& (0+255),c
   302  007E96  50C3               	movf	4035,w,c	;volatile
   303  007E98  2415               	addwf	??_main,w,c
   304  007E9A  6E17               	movwf	main@x,c
   305  007E9C  0E00               	movlw	0
   306  007E9E  2016               	addwfc	??_main+1,w,c
   307  007EA0  6E18               	movwf	main@x+1,c
   308                           
   309                           ;adc2.c: 39: conv(x);
   310  007EA2  C017  F009         	movff	main@x,conv@n
   311  007EA6  C018  F00A         	movff	main@x+1,conv@n+1
   312  007EAA  EC9B  F03F         	call	_conv	;wreg free
   313                           
   314                           ;adc2.c: 40: ADIF=0;
   315  007EAE  9C9E               	bcf	3998,6,c	;volatile
   316  007EB0  D7E9               	goto	l47
   317  007EB2                     __end_of_main:
   318                           	opt stack 0
   319                           intcon	equ	0xFF2
   320                           
   321 ;; *************** function _conv *****************
   322 ;; Defined at:
   323 ;;		line 65 in file "adc2.c"
   324 ;; Parameters:    Size  Location     Type
   325 ;;  n               2    8[COMRAM] int 
   326 ;; Auto vars:     Size  Location     Type
   327 ;;  temp            2   18[COMRAM] int 
   328 ;;  one             2   16[COMRAM] unsigned int 
   329 ;;  ten             2   14[COMRAM] unsigned int 
   330 ;;  hun             2   12[COMRAM] unsigned int 
   331 ;;  thou            2   10[COMRAM] unsigned int 
   332 ;; Return value:  Size  Location     Type
   333 ;;                  1    wreg      void 
   334 ;; Registers used:
   335 ;;		wreg, status,2, status,0, cstack
   336 ;; Tracked objects:
   337 ;;		On entry : 0/0
   338 ;;		On exit  : 0/0
   339 ;;		Unchanged: 0/0
   340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   341 ;;      Params:         2       0       0       0       0       0       0
   342 ;;      Locals:        10       0       0       0       0       0       0
   343 ;;      Temps:          0       0       0       0       0       0       0
   344 ;;      Totals:        12       0       0       0       0       0       0
   345 ;;Total ram usage:       12 bytes
   346 ;; Hardware stack levels used:    1
   347 ;; Hardware stack levels required when called:    2
   348 ;; This function calls:
   349 ;;		___awdiv
   350 ;;		___awmod
   351 ;;		_data
   352 ;; This function is called by:
   353 ;;		_main
   354 ;; This function uses a non-reentrant model
   355 ;;
   356                           
   357                           	psect	text1
   358  007F36                     __ptext1:
   359                           	opt stack 0
   360  007F36                     _conv:
   361                           	opt stack 28
   362                           
   363                           ;adc2.c: 67: unsigned thou,hun,ten,one;
   364                           ;adc2.c: 68: int temp;
   365                           ;adc2.c: 69: thou=n/1000;
   366                           
   367                           ;incstack = 0
   368  007F36  C009  F001         	movff	conv@n,___awdiv@dividend
   369  007F3A  C00A  F002         	movff	conv@n+1,___awdiv@dividend+1
   370  007F3E  0E03               	movlw	3
   371  007F40  6E04               	movwf	___awdiv@divisor+1,c
   372  007F42  0EE8               	movlw	232
   373  007F44  6E03               	movwf	___awdiv@divisor,c
   374  007F46  EC59  F03F         	call	___awdiv	;wreg free
   375  007F4A  C001  F00B         	movff	?___awdiv,conv@thou
   376  007F4E  C002  F00C         	movff	?___awdiv+1,conv@thou+1
   377                           
   378                           ;adc2.c: 70: temp=n%1000;
   379  007F52  C009  F001         	movff	conv@n,___awmod@dividend
   380  007F56  C00A  F002         	movff	conv@n+1,___awmod@dividend+1
   381  007F5A  0E03               	movlw	3
   382  007F5C  6E04               	movwf	___awmod@divisor+1,c
   383  007F5E  0EE8               	movlw	232
   384  007F60  6E03               	movwf	___awmod@divisor,c
   385  007F62  ECE5  F03E         	call	___awmod	;wreg free
   386  007F66  C001  F013         	movff	?___awmod,conv@temp
   387  007F6A  C002  F014         	movff	?___awmod+1,conv@temp+1
   388                           
   389                           ;adc2.c: 71: hun=temp/100;
   390  007F6E  C013  F001         	movff	conv@temp,___awdiv@dividend
   391  007F72  C014  F002         	movff	conv@temp+1,___awdiv@dividend+1
   392  007F76  0E00               	movlw	0
   393  007F78  6E04               	movwf	___awdiv@divisor+1,c
   394  007F7A  0E64               	movlw	100
   395  007F7C  6E03               	movwf	___awdiv@divisor,c
   396  007F7E  EC59  F03F         	call	___awdiv	;wreg free
   397  007F82  C001  F00D         	movff	?___awdiv,conv@hun
   398  007F86  C002  F00E         	movff	?___awdiv+1,conv@hun+1
   399                           
   400                           ;adc2.c: 72: temp=temp%100;
   401  007F8A  C013  F001         	movff	conv@temp,___awmod@dividend
   402  007F8E  C014  F002         	movff	conv@temp+1,___awmod@dividend+1
   403  007F92  0E00               	movlw	0
   404  007F94  6E04               	movwf	___awmod@divisor+1,c
   405  007F96  0E64               	movlw	100
   406  007F98  6E03               	movwf	___awmod@divisor,c
   407  007F9A  ECE5  F03E         	call	___awmod	;wreg free
   408  007F9E  C001  F013         	movff	?___awmod,conv@temp
   409  007FA2  C002  F014         	movff	?___awmod+1,conv@temp+1
   410                           
   411                           ;adc2.c: 73: ten=temp/10;
   412  007FA6  C013  F001         	movff	conv@temp,___awdiv@dividend
   413  007FAA  C014  F002         	movff	conv@temp+1,___awdiv@dividend+1
   414  007FAE  0E00               	movlw	0
   415  007FB0  6E04               	movwf	___awdiv@divisor+1,c
   416  007FB2  0E0A               	movlw	10
   417  007FB4  6E03               	movwf	___awdiv@divisor,c
   418  007FB6  EC59  F03F         	call	___awdiv	;wreg free
   419  007FBA  C001  F00F         	movff	?___awdiv,conv@ten
   420  007FBE  C002  F010         	movff	?___awdiv+1,conv@ten+1
   421                           
   422                           ;adc2.c: 74: one=temp%10;
   423  007FC2  C013  F001         	movff	conv@temp,___awmod@dividend
   424  007FC6  C014  F002         	movff	conv@temp+1,___awmod@dividend+1
   425  007FCA  0E00               	movlw	0
   426  007FCC  6E04               	movwf	___awmod@divisor+1,c
   427  007FCE  0E0A               	movlw	10
   428  007FD0  6E03               	movwf	___awmod@divisor,c
   429  007FD2  ECE5  F03E         	call	___awmod	;wreg free
   430  007FD6  C001  F011         	movff	?___awmod,conv@one
   431  007FDA  C002  F012         	movff	?___awmod+1,conv@one+1
   432                           
   433                           ;adc2.c: 75: data(thou+48);
   434  007FDE  500B               	movf	conv@thou,w,c
   435  007FE0  0F30               	addlw	48
   436  007FE2  ECCB  F03E         	call	_data
   437                           
   438                           ;adc2.c: 76: data(hun+48);
   439  007FE6  500D               	movf	conv@hun,w,c
   440  007FE8  0F30               	addlw	48
   441  007FEA  ECCB  F03E         	call	_data
   442                           
   443                           ;adc2.c: 77: data(ten+48);
   444  007FEE  500F               	movf	conv@ten,w,c
   445  007FF0  0F30               	addlw	48
   446  007FF2  ECCB  F03E         	call	_data
   447                           
   448                           ;adc2.c: 78: data(one+48);
   449  007FF6  5011               	movf	conv@one,w,c
   450  007FF8  0F30               	addlw	48
   451  007FFA  ECCB  F03E         	call	_data
   452  007FFE  0012               	return		;funcret
   453  008000                     __end_of_conv:
   454                           	opt stack 0
   455                           intcon	equ	0xFF2
   456                           
   457 ;; *************** function _data *****************
   458 ;; Defined at:
   459 ;;		line 59 in file "adc2.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;  data            1    wreg     unsigned char 
   462 ;; Auto vars:     Size  Location     Type
   463 ;;  data            1    1[COMRAM] unsigned char 
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   473 ;;      Params:         0       0       0       0       0       0       0
   474 ;;      Locals:         1       0       0       0       0       0       0
   475 ;;      Temps:          0       0       0       0       0       0       0
   476 ;;      Totals:         1       0       0       0       0       0       0
   477 ;;Total ram usage:        1 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; Hardware stack levels required when called:    1
   480 ;; This function calls:
   481 ;;		_pulse
   482 ;; This function is called by:
   483 ;;		_conv
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           	psect	text2
   488  007D96                     __ptext2:
   489                           	opt stack 0
   490  007D96                     _data:
   491                           	opt stack 28
   492                           
   493                           ;incstack = 0
   494                           ;data@data stored from wreg
   495  007D96  6E02               	movwf	data@data,c
   496                           
   497                           ;adc2.c: 61: LATCbits.LC0=1;
   498  007D98  808B               	bsf	3979,0,c	;volatile
   499                           
   500                           ;adc2.c: 62: LATD=data;
   501  007D9A  C002  FF8C         	movff	data@data,3980	;volatile
   502                           
   503                           ;adc2.c: 63: pulse();
   504  007D9E  ECD2  F03E         	call	_pulse	;wreg free
   505  007DA2  0012               	return		;funcret
   506  007DA4                     __end_of_data:
   507                           	opt stack 0
   508                           intcon	equ	0xFF2
   509                           
   510 ;; *************** function ___awmod *****************
   511 ;; Defined at:
   512 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;  dividend        2    0[COMRAM] int 
   515 ;;  divisor         2    2[COMRAM] int 
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  sign            1    5[COMRAM] unsigned char 
   518 ;;  counter         1    4[COMRAM] unsigned char 
   519 ;; Return value:  Size  Location     Type
   520 ;;                  2    0[COMRAM] int 
   521 ;; Registers used:
   522 ;;		wreg, status,2, status,0
   523 ;; Tracked objects:
   524 ;;		On entry : 0/0
   525 ;;		On exit  : 0/0
   526 ;;		Unchanged: 0/0
   527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   528 ;;      Params:         4       0       0       0       0       0       0
   529 ;;      Locals:         2       0       0       0       0       0       0
   530 ;;      Temps:          0       0       0       0       0       0       0
   531 ;;      Totals:         6       0       0       0       0       0       0
   532 ;;Total ram usage:        6 bytes
   533 ;; Hardware stack levels used:    1
   534 ;; This function calls:
   535 ;;		Nothing
   536 ;; This function is called by:
   537 ;;		_conv
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541                           	psect	text3
   542  007DCA                     __ptext3:
   543                           	opt stack 0
   544  007DCA                     ___awmod:
   545                           	opt stack 29
   546                           
   547                           ;incstack = 0
   548  007DCA  0E00               	movlw	0
   549  007DCC  6E06               	movwf	___awmod@sign,c
   550  007DCE  AE02               	btfss	___awmod@dividend+1,7,c
   551  007DD0  D006               	goto	l244
   552  007DD2  6C01               	negf	___awmod@dividend,c
   553  007DD4  1E02               	comf	___awmod@dividend+1,f,c
   554  007DD6  B0D8               	btfsc	status,0,c
   555  007DD8  2A02               	incf	___awmod@dividend+1,f,c
   556  007DDA  0E01               	movlw	1
   557  007DDC  6E06               	movwf	___awmod@sign,c
   558  007DDE                     l244:
   559  007DDE  AE04               	btfss	___awmod@divisor+1,7,c
   560  007DE0  D004               	goto	l245
   561  007DE2  6C03               	negf	___awmod@divisor,c
   562  007DE4  1E04               	comf	___awmod@divisor+1,f,c
   563  007DE6  B0D8               	btfsc	status,0,c
   564  007DE8  2A04               	incf	___awmod@divisor+1,f,c
   565  007DEA                     l245:
   566  007DEA  5003               	movf	___awmod@divisor,w,c
   567  007DEC  1004               	iorwf	___awmod@divisor+1,w,c
   568  007DEE  B4D8               	btfsc	status,2,c
   569  007DF0  D018               	goto	l252
   570  007DF2  0E01               	movlw	1
   571  007DF4  6E05               	movwf	___awmod@counter,c
   572  007DF6  D004               	goto	l247
   573  007DF8  90D8               	bcf	status,0,c
   574  007DFA  3603               	rlcf	___awmod@divisor,f,c
   575  007DFC  3604               	rlcf	___awmod@divisor+1,f,c
   576  007DFE  2A05               	incf	___awmod@counter,f,c
   577  007E00                     l247:
   578  007E00  AE04               	btfss	___awmod@divisor+1,7,c
   579  007E02  D7FA               	goto	l248
   580  007E04                     u230:
   581  007E04  5003               	movf	___awmod@divisor,w,c
   582  007E06  5C01               	subwf	___awmod@dividend,w,c
   583  007E08  5004               	movf	___awmod@divisor+1,w,c
   584  007E0A  5802               	subwfb	___awmod@dividend+1,w,c
   585  007E0C  A0D8               	btfss	status,0,c
   586  007E0E  D004               	goto	l251
   587  007E10  5003               	movf	___awmod@divisor,w,c
   588  007E12  5E01               	subwf	___awmod@dividend,f,c
   589  007E14  5004               	movf	___awmod@divisor+1,w,c
   590  007E16  5A02               	subwfb	___awmod@dividend+1,f,c
   591  007E18                     l251:
   592  007E18  90D8               	bcf	status,0,c
   593  007E1A  3204               	rrcf	___awmod@divisor+1,f,c
   594  007E1C  3203               	rrcf	___awmod@divisor,f,c
   595  007E1E  2E05               	decfsz	___awmod@counter,f,c
   596  007E20  D7F1               	goto	u230
   597  007E22                     l252:
   598  007E22  5006               	movf	___awmod@sign,w,c
   599  007E24  B4D8               	btfsc	status,2,c
   600  007E26  D004               	goto	l253
   601  007E28  6C01               	negf	___awmod@dividend,c
   602  007E2A  1E02               	comf	___awmod@dividend+1,f,c
   603  007E2C  B0D8               	btfsc	status,0,c
   604  007E2E  2A02               	incf	___awmod@dividend+1,f,c
   605  007E30                     l253:
   606  007E30  C001  F001         	movff	___awmod@dividend,?___awmod
   607  007E34  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   608  007E38  0012               	return	
   609  007E3A                     __end_of___awmod:
   610                           	opt stack 0
   611                           intcon	equ	0xFF2
   612                           status	equ	0xFD8
   613                           
   614 ;; *************** function ___awdiv *****************
   615 ;; Defined at:
   616 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;  dividend        2    0[COMRAM] int 
   619 ;;  divisor         2    2[COMRAM] int 
   620 ;; Auto vars:     Size  Location     Type
   621 ;;  quotient        2    6[COMRAM] int 
   622 ;;  sign            1    5[COMRAM] unsigned char 
   623 ;;  counter         1    4[COMRAM] unsigned char 
   624 ;; Return value:  Size  Location     Type
   625 ;;                  2    0[COMRAM] int 
   626 ;; Registers used:
   627 ;;		wreg, status,2, status,0
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   633 ;;      Params:         4       0       0       0       0       0       0
   634 ;;      Locals:         4       0       0       0       0       0       0
   635 ;;      Temps:          0       0       0       0       0       0       0
   636 ;;      Totals:         8       0       0       0       0       0       0
   637 ;;Total ram usage:        8 bytes
   638 ;; Hardware stack levels used:    1
   639 ;; This function calls:
   640 ;;		Nothing
   641 ;; This function is called by:
   642 ;;		_conv
   643 ;; This function uses a non-reentrant model
   644 ;;
   645                           
   646                           	psect	text4
   647  007EB2                     __ptext4:
   648                           	opt stack 0
   649  007EB2                     ___awdiv:
   650                           	opt stack 29
   651                           
   652                           ;incstack = 0
   653  007EB2  0E00               	movlw	0
   654  007EB4  6E06               	movwf	___awdiv@sign,c
   655  007EB6  AE04               	btfss	___awdiv@divisor+1,7,c
   656  007EB8  D006               	goto	l231
   657  007EBA  6C03               	negf	___awdiv@divisor,c
   658  007EBC  1E04               	comf	___awdiv@divisor+1,f,c
   659  007EBE  B0D8               	btfsc	status,0,c
   660  007EC0  2A04               	incf	___awdiv@divisor+1,f,c
   661  007EC2  0E01               	movlw	1
   662  007EC4  6E06               	movwf	___awdiv@sign,c
   663  007EC6                     l231:
   664  007EC6  AE02               	btfss	___awdiv@dividend+1,7,c
   665  007EC8  D006               	goto	l232
   666  007ECA  6C01               	negf	___awdiv@dividend,c
   667  007ECC  1E02               	comf	___awdiv@dividend+1,f,c
   668  007ECE  B0D8               	btfsc	status,0,c
   669  007ED0  2A02               	incf	___awdiv@dividend+1,f,c
   670  007ED2  0E01               	movlw	1
   671  007ED4  1A06               	xorwf	___awdiv@sign,f,c
   672  007ED6                     l232:
   673  007ED6  0E00               	movlw	0
   674  007ED8  6E08               	movwf	___awdiv@quotient+1,c
   675  007EDA  0E00               	movlw	0
   676  007EDC  6E07               	movwf	___awdiv@quotient,c
   677  007EDE  5003               	movf	___awdiv@divisor,w,c
   678  007EE0  1004               	iorwf	___awdiv@divisor+1,w,c
   679  007EE2  B4D8               	btfsc	status,2,c
   680  007EE4  D01C               	goto	l239
   681  007EE6  0E01               	movlw	1
   682  007EE8  6E05               	movwf	___awdiv@counter,c
   683  007EEA  D004               	goto	l234
   684  007EEC  90D8               	bcf	status,0,c
   685  007EEE  3603               	rlcf	___awdiv@divisor,f,c
   686  007EF0  3604               	rlcf	___awdiv@divisor+1,f,c
   687  007EF2  2A05               	incf	___awdiv@counter,f,c
   688  007EF4                     l234:
   689  007EF4  AE04               	btfss	___awdiv@divisor+1,7,c
   690  007EF6  D7FA               	goto	l235
   691  007EF8                     u170:
   692  007EF8  90D8               	bcf	status,0,c
   693  007EFA  3607               	rlcf	___awdiv@quotient,f,c
   694  007EFC  3608               	rlcf	___awdiv@quotient+1,f,c
   695  007EFE  5003               	movf	___awdiv@divisor,w,c
   696  007F00  5C01               	subwf	___awdiv@dividend,w,c
   697  007F02  5004               	movf	___awdiv@divisor+1,w,c
   698  007F04  5802               	subwfb	___awdiv@dividend+1,w,c
   699  007F06  A0D8               	btfss	status,0,c
   700  007F08  D005               	goto	l238
   701  007F0A  5003               	movf	___awdiv@divisor,w,c
   702  007F0C  5E01               	subwf	___awdiv@dividend,f,c
   703  007F0E  5004               	movf	___awdiv@divisor+1,w,c
   704  007F10  5A02               	subwfb	___awdiv@dividend+1,f,c
   705  007F12  8007               	bsf	___awdiv@quotient,0,c
   706  007F14                     l238:
   707  007F14  90D8               	bcf	status,0,c
   708  007F16  3204               	rrcf	___awdiv@divisor+1,f,c
   709  007F18  3203               	rrcf	___awdiv@divisor,f,c
   710  007F1A  2E05               	decfsz	___awdiv@counter,f,c
   711  007F1C  D7ED               	goto	u170
   712  007F1E                     l239:
   713  007F1E  5006               	movf	___awdiv@sign,w,c
   714  007F20  B4D8               	btfsc	status,2,c
   715  007F22  D004               	goto	l240
   716  007F24  6C07               	negf	___awdiv@quotient,c
   717  007F26  1E08               	comf	___awdiv@quotient+1,f,c
   718  007F28  B0D8               	btfsc	status,0,c
   719  007F2A  2A08               	incf	___awdiv@quotient+1,f,c
   720  007F2C                     l240:
   721  007F2C  C007  F001         	movff	___awdiv@quotient,?___awdiv
   722  007F30  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   723  007F34  0012               	return	
   724  007F36                     __end_of___awdiv:
   725                           	opt stack 0
   726                           intcon	equ	0xFF2
   727                           status	equ	0xFD8
   728                           
   729 ;; *************** function _command *****************
   730 ;; Defined at:
   731 ;;		line 53 in file "adc2.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  cmd             1    wreg     unsigned char 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  cmd             1    1[COMRAM] unsigned char 
   736 ;; Return value:  Size  Location     Type
   737 ;;                  1    wreg      void 
   738 ;; Registers used:
   739 ;;		wreg, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   745 ;;      Params:         0       0       0       0       0       0       0
   746 ;;      Locals:         1       0       0       0       0       0       0
   747 ;;      Temps:          0       0       0       0       0       0       0
   748 ;;      Totals:         1       0       0       0       0       0       0
   749 ;;Total ram usage:        1 bytes
   750 ;; Hardware stack levels used:    1
   751 ;; Hardware stack levels required when called:    1
   752 ;; This function calls:
   753 ;;		_pulse
   754 ;; This function is called by:
   755 ;;		_main
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text5
   760  007D88                     __ptext5:
   761                           	opt stack 0
   762  007D88                     _command:
   763                           	opt stack 29
   764                           
   765                           ;incstack = 0
   766                           ;command@cmd stored from wreg
   767  007D88  6E02               	movwf	command@cmd,c
   768                           
   769                           ;adc2.c: 55: LATCbits.LC0=0;
   770  007D8A  908B               	bcf	3979,0,c	;volatile
   771                           
   772                           ;adc2.c: 56: LATD=cmd;
   773  007D8C  C002  FF8C         	movff	command@cmd,3980	;volatile
   774                           
   775                           ;adc2.c: 57: pulse();
   776  007D90  ECD2  F03E         	call	_pulse	;wreg free
   777  007D94  0012               	return		;funcret
   778  007D96                     __end_of_command:
   779                           	opt stack 0
   780                           intcon	equ	0xFF2
   781                           status	equ	0xFD8
   782                           
   783 ;; *************** function _pulse *****************
   784 ;; Defined at:
   785 ;;		line 46 in file "adc2.c"
   786 ;; Parameters:    Size  Location     Type
   787 ;;		None
   788 ;; Auto vars:     Size  Location     Type
   789 ;;		None
   790 ;; Return value:  Size  Location     Type
   791 ;;                  1    wreg      void 
   792 ;; Registers used:
   793 ;;		wreg
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   799 ;;      Params:         0       0       0       0       0       0       0
   800 ;;      Locals:         0       0       0       0       0       0       0
   801 ;;      Temps:          1       0       0       0       0       0       0
   802 ;;      Totals:         1       0       0       0       0       0       0
   803 ;;Total ram usage:        1 bytes
   804 ;; Hardware stack levels used:    1
   805 ;; This function calls:
   806 ;;		Nothing
   807 ;; This function is called by:
   808 ;;		_command
   809 ;;		_data
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text6
   814  007DA4                     __ptext6:
   815                           	opt stack 0
   816  007DA4                     _pulse:
   817                           	opt stack 28
   818                           
   819                           ;adc2.c: 48: LATCbits.LC1=1;
   820                           
   821                           ;incstack = 0
   822  007DA4  828B               	bsf	3979,1,c	;volatile
   823                           
   824                           ;adc2.c: 49: _delay((unsigned long)((10)*(20000000/4000.0)));
   825  007DA6  0E41               	movlw	65
   826  007DA8  6E01               	movwf	??_pulse& (0+255),c
   827  007DAA  0EEE               	movlw	238
   828  007DAC                     u277:
   829  007DAC  2EE8               	decfsz	wreg,f,c
   830  007DAE  D7FE               	bra	u277
   831  007DB0  2E01               	decfsz	??_pulse& (0+255),f,c
   832  007DB2  D7FC               	bra	u277
   833  007DB4  D000               	nop2	
   834                           
   835                           ;adc2.c: 50: LATCbits.LC1=0;
   836  007DB6  928B               	bcf	3979,1,c	;volatile
   837                           
   838                           ;adc2.c: 51: _delay((unsigned long)((10)*(20000000/4000.0)));
   839  007DB8  0E41               	movlw	65
   840  007DBA  6E01               	movwf	??_pulse& (0+255),c
   841  007DBC  0EEE               	movlw	238
   842  007DBE                     u287:
   843  007DBE  2EE8               	decfsz	wreg,f,c
   844  007DC0  D7FE               	bra	u287
   845  007DC2  2E01               	decfsz	??_pulse& (0+255),f,c
   846  007DC4  D7FC               	bra	u287
   847  007DC6  D000               	nop2	
   848  007DC8  0012               	return		;funcret
   849  007DCA                     __end_of_pulse:
   850                           	opt stack 0
   851  0000                     intcon	equ	0xFF2
   852                           wreg	equ	0xFE8
   853                           status	equ	0xFD8
   854                           intcon	equ	0xFF2
   855                           wreg	equ	0xFE8
   856                           status	equ	0xFD8
   857                           
   858                           	psect	rparam
   859  0000                     intcon	equ	0xFF2
   860                           wreg	equ	0xFE8
   861                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     24      24
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_conv
    _conv->___awdiv
    _data->_pulse
    _command->_pulse

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1864
                                             20 COMRAM     4     4      0
                            _command
                               _conv
 ---------------------------------------------------------------------------------
 (1) _conv                                                12    10      2    1825
                                              8 COMRAM    12    10      2
                            ___awdiv
                            ___awmod
                               _data
 ---------------------------------------------------------------------------------
 (2) _data                                                 1     1      0      15
                                              1 COMRAM     1     1      0
                              _pulse
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _command                                              1     1      0      15
                                              1 COMRAM     1     1      0
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _pulse                                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _command
     _pulse
   _conv
     ___awdiv
     ___awmod
     _data
       _pulse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     18      18       1       18.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 24 05:07:08 2019

                     l47 7E84                       _GO 007E11             ___awdiv@sign 0006  
                    l231 7EC6                      l240 7F2C                      l232 7ED6  
                    l234 7EF4                      l235 7EEC                      l251 7E18  
                    l252 7E22                      l244 7DDE                      l253 7E30  
                    l245 7DEA                      l238 7F14                      l239 7F1E  
                    l247 7E00                      l248 7DF8                      _GIE 007F97  
                    u230 7E04                      u170 7EF8                      u277 7DAC  
                    u287 7DBE             ___awmod@sign 0006                      wreg 000FE8  
                   _ADIE 007CEE                     _ADIF 007CF6                     _LATD 000F8C  
                   _data 7D96                     _conv 7F36                     _main 7E3A  
                   start 0000             ___param_bank 000000                    ?_data 0001  
                  ?_conv 0009                    ?_main 0001          __end_of___awdiv 7F36  
        __end_of___awmod 7E3A                    _CMCON 000FB4          ___awdiv@divisor 0003  
        ___awdiv@counter 0005                    _PORTA 000F80                    _PORTC 000F82  
                  _PORTD 000F83                    _TRISA 000F92                    _TRISC 000F94  
                  _TRISD 000F95          __end_of_command 7D96                    _pulse 7DA4  
                  conv@n 0009                    main@x 0017                    status 000FD8  
        __initialization 7D82             __end_of_data 7DA4             __end_of_conv 8000  
           __end_of_main 7EB2                   ??_data 0002                   ??_conv 000B  
                 ??_main 0015            __activetblptr 000000                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _ADRESH 000FC4  
                 _ADRESL 000FC3         ___awdiv@dividend 0001                   ?_pulse 0001  
              ??___awdiv 0005                ??___awmod 0005         ___awdiv@quotient 0007  
        ___awmod@divisor 0003          ___awmod@counter 0005                ??_command 0002  
             __accesstop 0080  __end_of__initialization 7D82            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_pulse 7DCA                  ??_pulse 0001  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 7EB2  
                ___awmod 7DCA                  __pcinit 7D82                  __ramtop 0600  
                __ptext0 7E3A                  __ptext1 7F36                  __ptext2 7D96  
                __ptext3 7DCA                  __ptext4 7EB2                  __ptext5 7D88  
                __ptext6 7DA4                  _command 7D88         ___awmod@dividend 0001  
                conv@hun 000D                  conv@one 0011                  conv@ten 000F  
   end_of_initialization 7D82               command@cmd 0002      start_initialization 7D82  
               ?___awdiv 0001                 ?___awmod 0001                 ?_command 0001  
         __size_of_pulse 0026                 _LATCbits 000F8B                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 0084         __size_of___awmod 0070  
       __size_of_command 000E                 data@data 0002            __size_of_data 000E  
          __size_of_conv 00CA            __size_of_main 0078                 conv@temp 0013  
               conv@thou 000B  
